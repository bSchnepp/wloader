#ifndef EFIRUNTIME_H_
#define EFIRUNTIME_H_

#include <wefi/efistatus.h>
#include <wefi/eficommon.h>

typedef enum EFI_RESET_TYPE
{
	EfiResetCold,
	EfiResetWarm,
	EfiResetShutdown,
	EfiResetPlatformSpecific
} EFI_RESET_TYPE;

typedef struct
{
	UINT32 Resolution;
	UINT32 Accuracy;
	BOOLEAN SetsToZero;
} EFI_TIME_CAPABILITIES;

typedef struct
{
	EFI_GUID CapsuleGuid;
	UINT32 HeaderSize;
	UINT32 Flags;
	UINT32 CapsuleImageSize;
} EFI_CAPSULE_HEADER;

#define EFI_TIME_ADJUST_DAYLIGHT 0x01
#define EFI_TIME_IN_DAYLIGHT 0x02

#define EFI_UNSPECIFIED_TIMEZONE 0x07FF

typedef EFI_STATUS(EFIAPI* EFI_GET_TIME)(
	OUT EFI_TIME* Time, OUT EFI_TIME_CAPABILITIES* Capabilities INOPT);
typedef EFI_STATUS(EFIAPI* EFI_SET_TIME)(IN EFI_TIME* Time);
typedef EFI_STATUS(EFIAPI* EFI_GET_WAKEUP_TIME)(
	OUT BOOLEAN* Enabled, OUT BOOLEAN* Pending, OUT EFI_TIME* Time);
typedef EFI_STATUS(EFIAPI* EFI_SET_WAKEUP_TIME)(
	IN BOOLEAN Enable, IN EFI_TIME* Time INOPT);
typedef EFI_STATUS(EFIAPI* EFI_SET_VIRTUAL_ADDRESS_MAP)(IN UINTN MemoryMapSize,
	IN UINTN DescriptorSize, IN UINT32 DescriptorVersion,
	IN EFI_MEMORY_DESCRIPTOR* VirtualMap);
typedef EFI_STATUS(EFIAPI* EFI_CONVERT_POINTER)(
	IN UINTN DebugDisposition, IN VOID** Address);
typedef EFI_STATUS(EFIAPI* EFI_GET_VARIABLE)(IN CHAR16* VariableName,
	IN EFI_GUID* VendorGuid, OUT UINT32* Attributes OPTIONAL,
	INOUT UINTN* DataSize, OUT VOID* Data);
typedef EFI_STATUS(EFIAPI* EFI_SET_VARIABLE)(IN CHAR16* VariableName,
	IN EFI_GUID* VendorGuid, IN UINT32 Attributes, IN UINTN DataSize,
	IN VOID* Data);
typedef EFI_STATUS(EFIAPI* EFI_GET_NEXT_VARIABLE_NAME)(
	INOUT UINTN* VariableNameSize, INOUT CHAR16* VariableName,
	INOUT EFI_GUID* VendorGuid);
typedef EFI_STATUS(EFIAPI* EFI_GET_NEXT_HIGH_MONO_COUNT)(OUT UINT32* HighCount);
typedef VOID(EFIAPI* EFI_RESET_SYSTEM)(IN EFI_RESET_TYPE ResetType,
	IN EFI_STATUS ResetStatus, IN UINTN DataSize, INOPT VOID* ResetData);
typedef EFI_STATUS(EFIAPI* EFI_UPDATE_CAPSULE)(
	IN EFI_CAPSULE_HEADER** CapsuleHeaderArray, IN UINTN CapsuleCount,
	INOPT EFI_PHYSICAL_ADDRESS ScatterGatherList);
typedef EFI_STATUS(EFIAPI* EFI_QUERY_CAPSULE_CAPABILITIES)(
	IN EFI_CAPSULE_HEADER** CapsuleHeaderArray, IN UINTN CapsuleCount,
	OUT UINT64* MaximumCapsuleSize, OUT EFI_RESET_TYPE* ResetType);
typedef EFI_STATUS(EFIAPI* EFI_QUERY_VARIABLE_INFO)(IN UINT32 Attributes,
	OUT UINT64* MaximumVariableStorageSize,
	OUT UINT64* RemainingVariableStorageSize,
	OUT UINT64* MaximumVariableSize);

struct EFI_SIMPLE_TEXT_INPUT_PROTOCOL;
struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL;

typedef EFI_STATUS(EFIAPI* EFI_INPUT_READ_KEY)(
	IN struct EFI_SIMPLE_TEXT_INPUT_PROTOCOL* This, OUT EFI_INPUT_KEY);
typedef EFI_STATUS(EFIAPI* EFI_INPUT_RESET)(
	IN struct EFI_SIMPLE_TEXT_INPUT_PROTOCOL* This,
	IN BOOLEAN ExtendedVerification);

typedef EFI_STATUS(EFIAPI* EFI_TEXT_RESET)(
	IN struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL* This,
	IN BOOLEAN ExtendedVerification);
typedef EFI_STATUS(EFIAPI* EFI_TEXT_STRING)(
	IN struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL* This, IN CONST CHAR16* String);
typedef EFI_STATUS(EFIAPI* EFI_TEXT_TEST_STRING)(
	IN struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL* This, IN CONST CHAR16* String);
typedef EFI_STATUS(EFIAPI* EFI_TEXT_QUERY_MODE)(
	IN struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL* This, IN UINTN ModeNumber,
	OUT UINTN* Columns, OUT UINTN* Rows);
typedef EFI_STATUS(EFIAPI* EFI_TEXT_SET_MODE)(
	IN struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL* This, IN UINTN ModeNumber);
typedef EFI_STATUS(EFIAPI* EFI_TEXT_SET_ATTRIBUTE)(
	IN struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL* This, IN UINTN Attribute);
typedef EFI_STATUS(EFIAPI* EFI_TEXT_CLEAR_SCREEN)(
	IN struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL* This);
typedef EFI_STATUS(EFIAPI* EFI_TEXT_SET_CURSOR_POSITION)(
	IN struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL* This, IN UINTN ModeNumber,
	IN UINTN Column, IN UINTN Row);
typedef EFI_STATUS(EFIAPI* EFI_TEXT_ENABLE_CURSOR)(
	IN struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL* This, IN BOOLEAN Visible);

#endif
